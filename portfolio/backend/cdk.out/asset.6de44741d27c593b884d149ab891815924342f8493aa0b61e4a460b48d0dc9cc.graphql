type Doctor {
  doctorid: Int!
  qualifications: String
  tags: String
  registeredHospitalId: Int
}

type Hospital {
  hospitalid: Int!
  location: String
  opendate: AWSDate
  tags: String
}

type Patient {
  patientid: Int!
  registeredHospitalId: Int
  registeredDoctor: Int
  address: String
  age: Int
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelDoctorConnection {
  items: [Doctor]!
  nextToken: String
}

input ModelDoctorFilterInput {
  doctorid: ModelIntInput
  qualifications: ModelStringInput
  tags: ModelStringInput
  registeredHospitalId: ModelIntInput
  and: [ModelDoctorFilterInput]
  or: [ModelDoctorFilterInput]
  not: ModelDoctorFilterInput
}

type Query {
  getDoctor(doctorid: Int!): Doctor
  listDoctors(doctorid: Int, filter: ModelDoctorFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelDoctorConnection
  getHospital(hospitalid: Int!): Hospital
  listHospitals(hospitalid: Int, filter: ModelHospitalFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelHospitalConnection
  getPatient(patientid: Int!): Patient
  listPatients(patientid: Int, filter: ModelPatientFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPatientConnection
  doctorsByRegisteredHospitalId(registeredHospitalId: Int!, sortDirection: ModelSortDirection, filter: ModelDoctorFilterInput, limit: Int, nextToken: String): ModelDoctorConnection
  patientsByRegisteredHospitalId(registeredHospitalId: Int!, sortDirection: ModelSortDirection, filter: ModelPatientFilterInput, limit: Int, nextToken: String): ModelPatientConnection
}

input ModelDoctorConditionInput {
  qualifications: ModelStringInput
  tags: ModelStringInput
  registeredHospitalId: ModelIntInput
  and: [ModelDoctorConditionInput]
  or: [ModelDoctorConditionInput]
  not: ModelDoctorConditionInput
}

input CreateDoctorInput {
  doctorid: Int!
  qualifications: String
  tags: String
  registeredHospitalId: Int
}

input UpdateDoctorInput {
  doctorid: Int!
  qualifications: String
  tags: String
  registeredHospitalId: Int
}

input DeleteDoctorInput {
  doctorid: Int!
}

type Mutation {
  createDoctor(input: CreateDoctorInput!, condition: ModelDoctorConditionInput): Doctor
  updateDoctor(input: UpdateDoctorInput!, condition: ModelDoctorConditionInput): Doctor
  deleteDoctor(input: DeleteDoctorInput!, condition: ModelDoctorConditionInput): Doctor
  createHospital(input: CreateHospitalInput!, condition: ModelHospitalConditionInput): Hospital
  updateHospital(input: UpdateHospitalInput!, condition: ModelHospitalConditionInput): Hospital
  deleteHospital(input: DeleteHospitalInput!, condition: ModelHospitalConditionInput): Hospital
  createPatient(input: CreatePatientInput!, condition: ModelPatientConditionInput): Patient
  updatePatient(input: UpdatePatientInput!, condition: ModelPatientConditionInput): Patient
  deletePatient(input: DeletePatientInput!, condition: ModelPatientConditionInput): Patient
}

input ModelSubscriptionDoctorFilterInput {
  doctorid: ModelSubscriptionIntInput
  qualifications: ModelSubscriptionStringInput
  tags: ModelSubscriptionStringInput
  registeredHospitalId: ModelSubscriptionIntInput
  and: [ModelSubscriptionDoctorFilterInput]
  or: [ModelSubscriptionDoctorFilterInput]
}

type Subscription {
  onCreateDoctor(filter: ModelSubscriptionDoctorFilterInput): Doctor @aws_subscribe(mutations: ["createDoctor"])
  onUpdateDoctor(filter: ModelSubscriptionDoctorFilterInput): Doctor @aws_subscribe(mutations: ["updateDoctor"])
  onDeleteDoctor(filter: ModelSubscriptionDoctorFilterInput): Doctor @aws_subscribe(mutations: ["deleteDoctor"])
  onCreateHospital(filter: ModelSubscriptionHospitalFilterInput): Hospital @aws_subscribe(mutations: ["createHospital"])
  onUpdateHospital(filter: ModelSubscriptionHospitalFilterInput): Hospital @aws_subscribe(mutations: ["updateHospital"])
  onDeleteHospital(filter: ModelSubscriptionHospitalFilterInput): Hospital @aws_subscribe(mutations: ["deleteHospital"])
  onCreatePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["createPatient"])
  onUpdatePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["updatePatient"])
  onDeletePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["deletePatient"])
}

type ModelHospitalConnection {
  items: [Hospital]!
  nextToken: String
}

input ModelHospitalFilterInput {
  hospitalid: ModelIntInput
  location: ModelStringInput
  opendate: ModelStringInput
  tags: ModelStringInput
  and: [ModelHospitalFilterInput]
  or: [ModelHospitalFilterInput]
  not: ModelHospitalFilterInput
}

input ModelHospitalConditionInput {
  location: ModelStringInput
  opendate: ModelStringInput
  tags: ModelStringInput
  and: [ModelHospitalConditionInput]
  or: [ModelHospitalConditionInput]
  not: ModelHospitalConditionInput
}

input CreateHospitalInput {
  hospitalid: Int!
  location: String
  opendate: AWSDate
  tags: String
}

input UpdateHospitalInput {
  hospitalid: Int!
  location: String
  opendate: AWSDate
  tags: String
}

input DeleteHospitalInput {
  hospitalid: Int!
}

input ModelSubscriptionHospitalFilterInput {
  hospitalid: ModelSubscriptionIntInput
  location: ModelSubscriptionStringInput
  opendate: ModelSubscriptionStringInput
  tags: ModelSubscriptionStringInput
  and: [ModelSubscriptionHospitalFilterInput]
  or: [ModelSubscriptionHospitalFilterInput]
}

type ModelPatientConnection {
  items: [Patient]!
  nextToken: String
}

input ModelPatientFilterInput {
  patientid: ModelIntInput
  registeredHospitalId: ModelIntInput
  registeredDoctor: ModelIntInput
  address: ModelStringInput
  age: ModelIntInput
  and: [ModelPatientFilterInput]
  or: [ModelPatientFilterInput]
  not: ModelPatientFilterInput
}

input ModelPatientConditionInput {
  registeredHospitalId: ModelIntInput
  registeredDoctor: ModelIntInput
  address: ModelStringInput
  age: ModelIntInput
  and: [ModelPatientConditionInput]
  or: [ModelPatientConditionInput]
  not: ModelPatientConditionInput
}

input CreatePatientInput {
  patientid: Int!
  registeredHospitalId: Int
  registeredDoctor: Int
  address: String
  age: Int
}

input UpdatePatientInput {
  patientid: Int!
  registeredHospitalId: Int
  registeredDoctor: Int
  address: String
  age: Int
}

input DeletePatientInput {
  patientid: Int!
}

input ModelSubscriptionPatientFilterInput {
  patientid: ModelSubscriptionIntInput
  registeredHospitalId: ModelSubscriptionIntInput
  registeredDoctor: ModelSubscriptionIntInput
  address: ModelSubscriptionStringInput
  age: ModelSubscriptionIntInput
  and: [ModelSubscriptionPatientFilterInput]
  or: [ModelSubscriptionPatientFilterInput]
}
